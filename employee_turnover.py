# -*- coding: utf-8 -*-
"""Learner_Notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AlwYh4Y0qk_TTnq2wZB-YYZhoAFP1EbW

<h1 align="center">Predicting Employee Turnover with Scikitlearn</h1>

### Importing Libraries
---
"""

# Commented out IPython magic to ensure Python compatibility.
from __future__ import print_function
# %matplotlib inline
import os
import warnings
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as image
import pandas as pd
import pandas_profiling
plt.style.use("ggplot")
warnings.simplefilter("ignore")

plt.rcParams['figure.figsize'] = (12,8)

"""### Exploratory Data Analysis
---
"""

df = pd.read_csv('employee_data.csv')
df.head()

#We need to update pandas profiling to use it in Colab
pip install -U pandas-profiling

df.profile_report()

pd.crosstab(df.salary, df.quit)

pd.crosstab(df.salary, df.quit).plot(kind='bar')
plt.title("Turnover Frequency on Salary Bracket")
plt.xlabel("Salary")
plt.ylabel("Frequency of Turnover")
plt.show()

pd.crosstab(df.department, df.quit).plot(kind='bar')
plt.title("Turnover frequency on Department")
plt.xlabel("Department")
plt.ylabel("Frequency of turnover")
plt.show()

"""###  Encode Categorical Features
---
"""

cat_vars = ['department', 'salary']
for var in cat_vars:
  cat_list = pd.get_dummies(df[var], prefix=var)
  df = df.join(cat_list)

df.head()

df.drop(columns=['department', 'salary'], axis=1, inplace=True)
df.head()

"""### Now, it's really important to check for Class Imbalance in our dataset here

### Visualize Class Imbalance
---
"""

from yellowbrick.target import ClassBalance
plt.style.use("ggplot")
plt.rcParams['figure.figsize'] = (12,8)

visualizer = ClassBalance(labels=["stayed", "quit"])
visualizer.fit(df.quit)

"""###  Create Training and Test Sets
---
"""

x = df.loc[:,df.columns != 'quit']
y = df.quit

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(x, y, random_state =0, test_size=0.2, stratify=y)

"""### Building an Interactive Decision Tree Classifier
---

Supervised learning: 
- The inputs are random variables $X = X_1, ..., X_p$;
- The output is a random variable $Y.$

- Data is a finite set $$\mathbb{L}=\{(x_i,y_i)|i=0, ..., N-1\}$$
where $x_i \in X = X_1 \times ... \times X_p$ and $y_i \in y$ are randomly drawn from $P_{X,Y}.$

E.g., $(x_i,y_i)=((\text{salary = low, department = sales, ...}),\text{quit = 1})$

- The goal is to find a model $\varphi_\mathbb{L}: X \mapsto y$ minimizing $$\text{Err}(\varphi_\mathbb{L}) = \mathbb{E}_{X,Y}\{L(Y, \varphi_\mathbb{L}(X))\}.$$

About:
 
 - Decision trees are non-parametric models which can model arbitrarily complex relations between inputs and outputs, without any a priori assumption
 
- Decision trees handle numeric and categorical variables

- They implement feature selection, making them robust to noisy features (to an extent)

- Robust to outliers or errors in labels

- Easily interpretable by even non-ML practioners.

#### Decision trees: partitioning the feature space:

- Decision trees generally have low bias but have high variance.
- We will solve the high variance problem in Task 8.
"""

from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.tree import export_graphviz # display the tree within a Jupyter notebook
from IPython.display import SVG
from graphviz import Source
from IPython.display import display
from ipywidgets import interactive, IntSlider, FloatSlider, interact
import ipywidgets
from IPython.display import Image
from subprocess import call
import matplotlib.image as mpimg

@interact
def plot_tree(crit=['gini', 'entropy'],
              split=['best', 'random'],
              depth=IntSlider(min=1,max=30,value=2, continuous_update=False),
              min_split=IntSlider(min=2,max=5,value=2, continuous_update=False),
              min_leaf=IntSlider(min=1,max=5,value=1, continuous_update=False)):
  estimator = DecisionTreeClassifier(random_state=0,
                                     criterion=crit,
                                     max_depth=depth,
                                     min_samples_split=min_split,
                                     min_samples_leaf=min_leaf)
  
  
  
  estimator.fit(X_train, y_train)
  print("Decision Tree Training Acccuracy: {:.3f}".format(accuracy_score(y_train, estimator.predict(X_train))))
  print("Decision Tree Test Acccuracy: {:.3f}".format(accuracy_score(y_test, estimator.predict(X_test))))

  graph = Source(tree.export_graphviz(estimator, out_file=None,
                                      feature_names = X_train.columns,
                                      class_names = ['stayed', 'quit'],
                                      filled=True))
  display(Image(data=graph.pipe(format='png')))
  
  return estimator

"""###  Build an Interactive Random Forest Classifier
---

Although randomization increases bias, it is possible to get a reduction in variance of the ensemble. Random forests are one of the most robust machine learning algorithms for a variety of problems.

- Randomization and averaging lead to a reduction in variance and improve accuracy
- The implementations are parallelizable
- Memory consumption and training time can be reduced by bootstrapping
- Sampling features and not solely sampling examples is crucial to improving accuracy
"""

@interact
def plot_tree_rf(crit=['gini', 'entropy'],
                 bootstrap=['True','False'],
                 depth=IntSlider(min=1,max=30,value=3, continuous_update=False),
                 forests=IntSlider(min=1,max=500,value=100,continuous_update=False),
                 min_split=IntSlider(min=2,max=5,value=2, continuous_update=False),
                 min_leaf=IntSlider(min=1,max=5,value=1, continuous_update=False)):
  estimator = RandomForestClassifier(random_state=1,
                                     criterion = crit,
                                     bootstrap = bootstrap,
                                     n_estimators = forests,
                                     max_depth= depth,
                                     min_samples_split= min_split,
                                     min_samples_leaf= min_leaf,
                                     n_jobs=-1,
                                     verbose=False)
  estimator.fit(X_train, y_train)
  print("Random Forests Training Acccuracy: {:.3f}".format(accuracy_score(y_train, estimator.predict(X_train))))
  print("Random Forests Test Acccuracy: {:.3f}".format(accuracy_score(y_test, estimator.predict(X_test))))
  num_tree=estimator.estimators_[0]
  print('\Visualising Tree:', 0)

  graph = Source(tree.export_graphviz(num_tree,
                                      out_file=None,
                                      feature_names = X_train.columns,
                                      class_names = ['stayed', 'quit'],
                                      filled=True))
  display(Image(data=graph.pipe(format='png')))

  return estimator

"""### Feature Importance and Evaluation Metrics
---
"""

pip install yellowbrick

pip install -U yellowbrick

from yellowbrick.model_selection import FeatureImportances
plt.rcParams['figure.figsize'] = (12,8)
plt.style.use("ggplot")

rf = RandomForestClassifier(bootstrap='True', ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=7, max_features='auto',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, n_estimators=100,
                       n_jobs=-1, oob_score=False, random_state=1,
                       verbose=False, warm_start=False)

viz = FeatureImportances(rf)
viz.fit(X_train, y_train)
viz.show();

dt = DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=2, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_impurity_split=None,
                       min_samples_leaf=1, min_samples_split=2,
                       min_weight_fraction_leaf=0.0, presort='deprecated',
                       random_state=0, splitter='best')

viz = FeatureImportances(dt)
viz.fit(X_train, y_train)
viz.show();

from yellowbrick.classifier import ROCAUC

visualizer = ROCAUC(rf, classes = ['stayed','quit'])

visualizer.fit(X_train, y_train)
visualizer.score(X_test, y_test)
visualizer.poof();

from yellowbrick.classifier import ROCAUC

visualizer = ROCAUC(dt, classes = ['stayed','quit'])

visualizer.fit(X_train, y_train)
visualizer.score(X_test, y_test)
visualizer.poof();

"""### So, I can sayb the Random Forest Classifier performed better in this dataset.

Thanks for Checking this out!

---





Hritik Bhandari
"""